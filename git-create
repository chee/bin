#!/usr/bin/env -S deno run --allow-run --allow-read --allow-write --allow-env
// an ai wrote this
import { parse } from "@std/flags"
import { basename } from "@std/path"
import { cyan, green, red, yellow } from "@std/fmt/colors"

const {
  _: pos,
  yes,
  name,
  help,
} = parse(Deno.args, {
  alias: { y: "yes", n: "name", h: "help" },
  boolean: ["yes"],
  default: { yes: false },
})

function beHelpful() {
  console.log(`
usage: git create <public|private> [dir] [--name name] [-y|--yes]

options:
  public|private   visibility (required)
  dir              target directory (default .)
  -n, --name       repo name
  -y, --yes        skip prompts
  -h, --help       show this help
`)
}

if (help) {
  beHelpful()
  Deno.exit(0)
}

if (pos.length < 1 || (pos[0] !== "public" && pos[0] !== "private")) {
  console.error(red("error:"), "visibility 'public' or 'private'")
  beHelpful()
  Deno.exit(1)
}

const visibility = pos[0] as "public" | "private"
const dir = typeof pos[1] == "string" ? pos[1] ?? "." : "."
const defaultName = dir === "." ? basename(Deno.cwd()) : basename(dir)
const repoName = typeof name == "string" ? name ?? defaultName : defaultName

async function run(cmd: string[], cwd = dir, silent = false): Promise<string> {
  if (!silent) console.log(cyan(`$ ${cmd.join(" ")}`))
  const command = new Deno.Command(cmd[0], {
    args: cmd.slice(1),
    cwd,
    stdout: "piped",
    stderr: "piped",
  })
  const { code, stdout, stderr } = await command.output()
  if (code !== 0) {
    if (!silent) console.error(red(new TextDecoder().decode(stderr)))
    throw new Error(`failed: ${cmd.join(" ")}`)
  }
  return new TextDecoder().decode(stdout).trim()
}

async function tryRun(cmd: string[], cwd = dir): Promise<string | null> {
  try {
    return await run(cmd, cwd, true)
  } catch {
    return null
  }
}

async function confirm(msg: string) {
  if (yes) return
  await Deno.stdout.write(new TextEncoder().encode(`${yellow(msg)} [y/N] `))
  const buf = new Uint8Array(64)
  const nread = (await Deno.stdin.read(buf)) ?? 0
  const resp = new TextDecoder().decode(buf.subarray(0, nread)).trim()
  if (!/^y(es)?$/i.test(resp)) {
    console.log(red("aborted"))
    Deno.exit(0)
  }
}

async function ensureDir(path: string) {
  try {
    const st = await Deno.stat(path)
    if (!st.isDirectory) throw new Error()
    console.log(green(`dir exists:`), path)
  } catch {
    console.log(yellow(`creating dir:`), path)
    await confirm("continue")
    await Deno.mkdir(path, { recursive: true })
  }
}

async function setup() {
  console.log(green("visibility:"), visibility)
  await ensureDir(dir)

  const isRepo =
    (await tryRun(["git", "rev-parse", "--is-inside-work-tree"])) === "true"
  if (!isRepo) {
    console.log(yellow("initializing git repo"))
    await confirm("init repo")
    await run(["git", "init"])
  } else {
    console.log(green("git repo detected"))
  }

  const rems = (await tryRun(["git", "remote"]))?.split("\n") ?? []
  if (rems.includes("origin")) {
    console.log(yellow("renaming origin‚Üíupstream"))
    await confirm("rename remote")
    await run(["git", "remote", "rename", "origin", "upstream"])
  }
  const repoExists = await tryRun(["gh", "repo", "view", repoName])
  if (repoExists) {
    console.log(
      yellow(
        `‚ö†Ô∏è  GitHub repo "${repoName}" already exists. Skipping creation.`,
      ),
    )
  } else {
    console.log(green("creating GH repo:"), repoName)
    await confirm("create remote")
    await run([
      "gh",
      "repo",
      "create",
      repoName,
      "--source=.",
      `--${visibility}`,
      "--remote=origin",
    ])
  }

  console.log(green("üëçüòéüëç done"))
}

await setup()
